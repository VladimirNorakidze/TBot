import os
import re
import requests
import time
import telebot
import logger
import analyzer as a

TOKEN = "815730867:AAEvf0m5WwnKzO-qJoHUTnbQdN5e6eh9WKo"

start_time = time.time()
cache = []

bot = telebot.TeleBot(TOKEN)
start_status = True
with open("botpid.txt", "w") as file:
    file.write(str(os.getpid()))


def img_proc(chatid, fileid=None, url=None):
    if (fileid is not None) and (url is None):
        file = bot.get_file(file_id=fileid)
        response = requests.get(f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}")
    else:
        response = requests.get(url)
    return a.img_analyzer(response)


def photo_msg(msg, from_url=False):
    global cache, start_time
    chatid = msg.chat.id
    cache, start_time = logger.logger(msg, "", cache, start_time)
    if not from_url:
        bot.send_message(chat_id=chatid, text="üòÆ")
        time.sleep(1)
        bot.reply_to(msg, text="–≠—Ç–æ —á—Ç–æ... –ö–∞—Ä—Ç–∏–Ω–∫–∞???")
        bot.send_message(chat_id=chatid, text="–°–º–æ—Ç—Ä–∏ —á–µ –º–æ–≥—É)")
        ans = img_proc(chatid=chatid, fileid=msg.photo[-1].file_id)
    else:
        ans = img_proc(chatid, url=msg.text)
    bot.send_message(chat_id=chatid, text="–•–æ–±–∞!")
    bot.send_photo(chat_id=chatid, photo=ans)


def doc_msg(msg):
    global cache, start_time
    chatid = msg.chat.id
    cache, start_time = logger.logger(msg, "", cache, start_time)
    bot.send_message(chat_id=chatid, text="üòÆ")
    time.sleep(1)
    bot.reply_to(msg, text="–í–æ—Ç –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–µ–µ–µ–µ–µ–µ–Ω—Ç–∏–∫–∏ –ø–æ–¥—ä–µ—Ö–∞–ª–∏)")
    bot.send_message(chat_id=chatid, text="–©–∞ –≤–µ—Ä–Ω—É, —Å–µ–∫—É–Ω–¥—É")
    ans = img_proc(chatid=chatid, fileid=msg.document.file_id)
    bot.send_photo(chat_id=chatid, photo=ans)


def text_msg(msg):
    global cache, start_time
    chatid = msg.chat.id
    if not ("http" in msg.text):
        answer = a.wa_analyzer(msg.text)
        cache, start_time = logger.logger(msg, answer, cache, start_time)
        bot.send_message(chat_id=chatid, text=answer)
    else:
        pattern = r"^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+[.](jpg|jpeg|png|gif)$"
        if re.match(pattern, msg.text, re.IGNORECASE):
            bot.send_message(chat_id=chatid, text="–°–µ–π—á–∞—Å, —Å–∫–∞—á–∞—é –∏ –ø—Ä–∏—à–ª—é")
            photo_msg(msg, from_url=True)
        else:
            bot.send_message(chat_id=chatid, text=r"–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç—É—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ "
                                                  r"—Å—Å—ã–ª–∫–∞ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .jpg, .jpeg, .png –∏–ª–∏ .gif...")


def main(messages):
    """
    When new messages arrive TeleBot will call this function.
    """
    global cache, start_time
    if messages[-1].text != "/stop":
        for m in messages:
            if start_status:
                if m.content_type == "text":
                    text_msg(m)
                elif m.content_type == "photo":
                    photo_msg(m)
                elif m.content_type == "document" and "image" in m.document.mime_type:
                    doc_msg(m)
                else:
                    cache, start_time = logger.logger(m, "Unknown type...", cache, start_time)
                    bot.reply_to(m, text="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ üò≠üò≠üò≠")
                    time.sleep(1)
                    bot.send_message(chat_id=m.chat.id, text="–û–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–∫—É(")


@bot.message_handler(commands=["start"])
def echo_start(msg):
    global start_status
    if not start_status:
        start_status = True
        welcome_text = f"–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, {msg.from_user.first_name}. –ï—Å–ª–∏ —è —Ç–µ–±—è —É—Ç–æ–º–ª—é, –Ω–∞–ø–∏—à–∏ /stop."
        bot.reply_to(msg, welcome_text)


@bot.message_handler(commands=["stop"])
def echo_stop(msg):
    global start_status
    start_status = False
    bot.reply_to(msg, f"–ü–æ–∫–µ–¥–∞, {msg.from_user.first_name} ‚úåÔ∏è")


@bot.message_handler()
def echo_messages(msg):
    global cache, start_time
    if not start_status:
        cache, start_time = logger.logger(msg, answer="Bot is not activated", cache=cache, start_time=start_time)
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}. –Ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start."
        bot.send_message(msg.chat.id, welcome_text)


bot.set_update_listener(main)
bot.polling(none_stop=True)


while True:
    pass
