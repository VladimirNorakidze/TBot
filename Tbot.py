import os
import re
import requests
import time
import emoji
import telebot
import logger
import analyzer as a

TOKEN = "TOKEN"

start_time = time.time()
cache = []

bot = telebot.TeleBot(TOKEN)
start_status = False

with open("botpid.txt", "w") as file:
    file.write(str(os.getpid()))


def check_emoji(text):
    """
    –§—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞
    """
    f = lambda x: bool(emoji.get_emoji_regexp().search(x))
    text = emoji.get_emoji_regexp().split(text)
    if not (text[0] or text[-1]):
        if len(text) == 3 and f(text[1]):
            return True
        elif len(text) == 5:
            if f(text[1]) and (text[2] == "\u200d") and f(text[3]):
                return True
        else:
            return False
    else:
        return False


def img_processing(fileid=None, url=None):
    """
    –§—É–Ω–∫—Ü–∏—è, –ø–æ–ª—É—á–∞—é—â–∞—è url –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏
    –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—é-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    if (fileid is not None) and (url is None):
        file = bot.get_file(file_id=fileid)
        response = requests.get(f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}")
    else:
        response = requests.get(url)
    return a.img_analyzer(response)


def photo_sender(chat_id, url, product_id):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ñ–æ—Ç–æ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –Æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    response = requests.get(url)
    bot.send_photo(chat_id=chat_id, photo=response.content)
    prod_url = 'https://youla.io/p' + str(product_id)
    bot.send_message(chat_id=chat_id, text=prod_url)


def photo_msg(msg):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —Ç–∏–ø–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '—Ñ–æ—Ç–æ'
    """
    chatid = msg.chat.id
    bot.send_message(chat_id=chatid, text="üòÆ")
    bot.reply_to(msg, text="–≠—Ç–æ —á—Ç–æ... –ö–∞—Ä—Ç–∏–Ω–∫–∞???")
    bot.send_message(chat_id=chatid, text="–°–º–æ—Ç—Ä–∏, —Ç–µ–±–µ –º–æ–∂–µ—Ç –µ—â–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è —ç—Ç–æ)")
    urls, titles, prod_id, _ = img_processing(fileid=msg.photo[-1].file_id)
    time.sleep(1)
    for i, url in enumerate(urls):
        photo_sender(chat_id=chatid, url=url, product_id=prod_id[i])
    bot.send_message(chat_id=chatid, text="–•–æ–±–∞!")
    return titles


def doc_msg(msg):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —Ç–∏–ø–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '–¥–æ–∫—É–º–µ–Ω—Ç'
    """
    chatid = msg.chat.id
    bot.send_message(chat_id=chatid, text="üòÆ")
    time.sleep(1)
    bot.reply_to(msg, text="–í–æ—Ç –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–µ–µ–µ–µ–µ–µ–Ω—Ç–∏–∫–∏ –ø–æ–¥—ä–µ—Ö–∞–ª–∏)")
    bot.send_message(chat_id=chatid, text="–©–∞ –≤–µ—Ä–Ω—É, —Å–µ–∫—É–Ω–¥—É")
    urls, titles, prod_id, _ = img_processing(fileid=msg.document.file_id)
    time.sleep(1)
    for i, url in enumerate(urls):
        photo_sender(chat_id=chatid, url=url, product_id=prod_id[i])
    bot.send_message(chat_id=chatid, text="–•–æ–±–∞!")
    return titles


def text_msg(msg):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ —Ç–∏–ø–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è '—Ç–µ–∫—Å—Ç' –∏–ª–∏ 'url'
    """
    chatid = msg.chat.id
    if (msg.text.lower() == '–µ—â–µ' or msg.text.lower() == '–µ—â—ë'):
        urls, titles, prod_id, msg_status = a.wa_analyzer()
        if msg_status:
            bot.send_message(chat_id=chatid, text="–û–¥–Ω—É —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")
            time.sleep(1)
            for i, url in enumerate(urls):
                photo_sender(chat_id=chatid, url=url, product_id=prod_id[i])
            bot.send_message(chat_id=chatid, text="–•–æ–±–∞!")
        else:
            bot.send_message(chat_id=chatid, text=urls)
    elif not ("http" in msg.text):
        urls, titles, prod_id,  _ = a.wa_analyzer(msg.text)
        bot.send_message(chat_id=chatid, text="–û–¥–Ω—É —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")
        time.sleep(1)
        for i, url in enumerate(urls):
            photo_sender(chat_id=chatid, url=url, product_id=prod_id[i])
        bot.send_message(chat_id=chatid, text="–•–æ–±–∞!")
    else:
        pattern = r"^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+[.](jpg|jpeg|png|gif)$"
        if re.match(pattern, msg.text, re.IGNORECASE):
            bot.send_message(chat_id=chatid, text="–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é —á—Ç–æ-–Ω–∏–±—É–¥—å...")
            time.sleep(1)
            urls, titles, prod_id, _ = img_processing(url=msg.text)
            for i, url in enumerate(urls):
                photo_sender(chat_id=chatid, url=url, product_id=prod_id[i])
        else:
            bot.send_message(chat_id=chatid, text=r"–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç—É—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ "
                                                  r"—Å—Å—ã–ª–∫–∞ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .jpg, .jpeg, .png –∏–ª–∏ .gif...")
            titles = []
    return titles


def main(messages):
    global cache, start_time
    if messages[-1].text != "/stop":
        if start_status:
            for m in messages:
                if m.content_type == "text":
                    if check_emoji(m.text):
                        name = m.from_user.first_name
                        ans = f"{name}, —è –Ω–µ —Å–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–º–∞–π–ª–∞..."
                        ans += "–ü—Ä–∏—à–ª–∏ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–µ–ª –±—ã —É–≤–∏–¥–µ—Ç—å :3"
                        bot.send_message(m.chat.id, text=ans)
                    else:
                        ans = text_msg(m)
                        cache, start_time = logger.logger(m, ans, cache, start_time)
                elif m.content_type == "photo":
                    ans = photo_msg(m)
                    cache, start_time = logger.logger(m, ans, cache, start_time)
                elif m.content_type == "document" and ("image" in m.document.mime_type):
                    ans = doc_msg(m)
                    cache, start_time = logger.logger(m, ans, cache, start_time)
                elif m.content_type == "sticker":
                    bot.send_message(m.chat.id, text=m.sticker.emoji)
                else:
                    cache, start_time = logger.logger(m, "Unknown type...", cache, start_time)
                    bot.reply_to(m, text="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ üò≠üò≠üò≠")
                    time.sleep(1)
                    bot.send_message(chat_id=m.chat.id, text="–û–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–∫—É(")


@bot.message_handler(commands=["start"])
def echo_start(msg):
    global start_status
    if not start_status:
        start_status = True
        welcome_text = f"–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, {msg.from_user.first_name}. –ï—Å–ª–∏ —è —Ç–µ–±—è —É—Ç–æ–º–ª—é, –Ω–∞–ø–∏—à–∏ /stop."
        bot.reply_to(msg, welcome_text)


@bot.message_handler(commands=["stop"])
def echo_stop(msg):
    global start_status
    start_status = False
    bot.reply_to(msg, f"–ü–æ–∫–µ–¥–∞, {msg.from_user.first_name} ‚úåÔ∏è")


@bot.message_handler(content_types=["text", "doc", "photo", "sticker"])
def echo_messages(msg):
    global cache, start_time
    if not start_status:
        cache, start_time = logger.logger(msg, answer="Bot is not activated", cache=cache, start_time=start_time)
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}. –Ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start."
        bot.send_message(msg.chat.id, welcome_text)


bot.set_update_listener(main)
bot.polling(none_stop=True)


while True:
    pass
